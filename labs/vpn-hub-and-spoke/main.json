{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmAdminUsername": {
            "type": "string",
            "metadata": {
                "description": "Administrator name for VMs that are created"
            }
        },
        "vmAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the VMs that are created"
            }
        },
        "vpnSharedSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the VMs that are created"
            }
        },
        "vmSku": {
            "type": "string",
            "metadata": {
                "description": "The SKU of VM to deploy"
            },
            "defaultValue": "Standard_DS2_v2"
        },
        "tags": {
            "type": "object",
            "metadata": {
                "description": "The tags that will be associated to the VM"
            },
            "defaultValue": {
                "environment": "vpnlab"
            }
        },
        "hubVnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the hub Virtual Network"
            },
            "defaultValue": "vnet-hub"
        },
        "spokeVnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the spoke Virtual Networks"
            },
            "defaultValue": "vnet-spoke"
        },
        "hubCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Virtual Network"
            },
            "defaultValue": "10.0.0.0/16"
        },
        "spokeCidrs": {
            "type": "array",
            "metadata": {
                "description": "The CIDR blocks assigned to the spoke Virtual Networks"
            },
            "defaultValue": [
                "10.1.0.0/16",
                "10.2.0.0/16"
            ],
            "maxLength": 2
        },
        "hubGatewaySubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Gateway subnet"
            },
            "defaultValue": "10.0.0.0/24"
        },
        "hubBastionSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Bastion subnet"
            },
            "defaultValue": "10.0.1.0/24"
        },
        "hubPrimarySubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub primary subnet"
            },
            "defaultValue": "10.0.2.0/24"
        },
        "spokePrimarySubnetCidrs": {
            "type": "array",
            "metadata": {
                "description": "The CIDR blocks assigned to the spoke application subnets"
            },
            "defaultValue": [
                "10.1.0.0/24",
                "10.2.0.0/24"
            ],
            "maxLength": 2
        },
        "primarySubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the primary subnet in the hub and on-premises Virtual Networks"
            },
            "defaultValue": "snet-pri"
        },
        "bastionPublicIpName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Public IP used by Azure Bastion"
            },
            "defaultValue": "pip-bastion"
        },
        "hubVngPublicIpName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Public IP used by hub Virtual Network Gateway"
            },
            "defaultValue": "pip-hubvgw"
        },
        "hubVngName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the hub Virtual Network Gateway"
            },
            "defaultValue": "vgw-hub"
        },
        "hubLngName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the hub Virtual Network Gateway"
            },
            "defaultValue": "lgw"
        },
        "bgpPeerPrefixes": {
            "type": "array",
            "metadata": {
                "description": "The prefixes advertised by the BGP peer.  Must at least contain /32s for BGP peer"
            }
        },
        "lgwPublicIPAddress": {
            "type": "string",
            "metadata": {
                "description": "The public IP address of the local network gateway (your VPN device)"
            }
        },
        "localBgpAsn": {
            "type": "string",
            "metadata": {
                "description": "The ASN of your on-premises network"
            }
        },
        "bgpPeerAddress": {
            "type": "string",
            "metadata": {
                "description": "The IP address of the BGP peer"
            }
        },
        "bgpPeerWeight": {
            "type": "int",
            "metadata": {
                "description": "The weight added to the routes advertised by this peer"
            },
            "defaultValue": 0
        },
        "vpnConnectionWeight": {
            "type": "int",
            "metadata": {
                "description": "The weight of the VPN connection"
            },
            "defaultValue": 0
        },
        "bastionName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the instance of Azure Bastion"
            },
            "defaultValue": "bstss"
        },
        "spokeRouteTable": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Route Table assigned to the application and data subnets in the spoke Virtual Network"
            },
            "defaultValue": "rt-spoke"
        },
        "hubVmName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the VM in the primary subnet in the hub VNet"
            },
            "defaultValue": "vmhp01"
        },
        "spokeVmName": {
            "type": "string",
            "metadata": {
                "description": "The naming prefix assigned to the VMs in the spokes VNets"
            },
            "defaultValue": "vmsp0"
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "networkApiVersion": "2020-04-01",
        "resourceDeploymentsApiVersion": "2019-10-01",
        "diagApiVersion": "2017-05-01-preview",
        "bastionSubnetName": "AzureBastionSubnet",
        "hubToSpokePeeringName": "peerhubtospoke",
        "spokeToHubPeeringName": "peerspoketohub",
        "hubVngConnName": "conn-hubtoonprem"
    },
    "resources": [
        /* Create hub Virtual Network */
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('hubVnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('hubCidr')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "GatewaySubnet",
                        "properties": {
                            "addressPrefix": "[parameters('hubGatewaySubnetCidr')]"
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[parameters('hubBastionSubnetCidr')]"
                        }
                    },
                    {
                        "name": "[parameters('primarySubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('hubPrimarySubnetCidr')]"
                        }
                    }
                ],
                "enableDdosProtection": false
            },
            "resources": [
            ]
        },
        /* Create two spoke Virtual Networks */
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[concat(parameters('spokeVnetName'),copyIndex(1))]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[concat(parameters('spokeCidrs')[copyIndex()])]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('primarySubnetName')]",
                        "properties": {
                            "addressPrefix": "[concat(parameters('spokePrimarySubnetCidrs')[copyIndex()])]"
                        }
                    }
                ],
                "enableDdosProtection": false
            },
            "copy": {
                "name": "spokevnets",
                "count": "[length(parameters('spokeCidrs'))]"
            },
            "resources": [
            ]
        },
        /* Create Public IP for hub Virtual Network Gateway */
        {
            "name": "[parameters('hubVngPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Dynamic"
            },
            "sku": {
                "name": "Basic"
            }
        },
        /* Create hub Virtual Network Gateway */
        {
            "name": "[parameters('hubVngName')]",
            "type": "Microsoft.Network/virtualNetworkGateways",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('hubVngPublicIpName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]"
            ],
            "properties": {
                "gatewayType": "vpn",
                "ipConfigurations": [
                    {
                        "name": "default",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVnetName'), 'GatewaySubnet')]"
                            },
                            "publicIpAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('hubVngPublicIpName'))]"
                            }
                        }
                    }
                ],
                "vpnType": "RouteBased",
                "vpnGatewayGeneration": "Generation2",
                "sku": {
                    "name": "VpnGw2",
                    "tier": "VpnGw2"
                }
            }
        },
        /* Create hub Local Network Gateway */
        {
            "name": "[parameters('hubLngName')]",
            "type": "Microsoft.Network/localNetworkGateways",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]"
            ],
            "properties": {
                "localNetworkAddressSpace": {
                    "addressPrefixes": "[parameters('bgpPeerPrefixes')]"
                },
                "gatewayIpAddress": "[parameters('lgwPublicIPAddress')]",
                "bgpSettings": {
                    "asn": "[parameters('localBgpAsn')]",
                    "bgpPeeringAddress": "[parameters('bgpPeerAddress')]",
                    "peerWeight": "[parameters('bgpPeerWeight')]"
                }
            }
        },
        /* Create VPN connection to connect hub Virtual Network Gateway to on-premises Virtual Network Gateway */
        {
            "name": "[variables('hubVngConnName')]",
            "type": "Microsoft.Network/connections",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]",
                "[concat('Microsoft.Network/localNetworkGateways/', parameters('hubLngName'))]"
            ],
            "properties": {
                "virtualNetworkGateway1": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworkGateways/',parameters('hubVngName'))]"
                },
                "localNetworkGateway2": {
                    "id": "[resourceId('Microsoft.Network/localNetworkGateways/', parameters('hubLngName'))]"
                },
                "connectionType": "IPSec",
                "connectionProtocol": "IKEv2",
                "routingWeight": "[parameters('vpnConnectionWeight')]",
                "sharedKey": "[parameters('vpnSharedSecret')]",
                "enableBgp": true,
                "useLocalAzureIpAddress": false,
                "usePolicyBasedTrafficSelectors": false,
                "ipsecPolicies": [
                    {
                        "saLifeTimeSeconds": 28800,
                        "saDataSizeKilobytes": 102400000,
                        "ipsecEncryption": "GCMAES256",
                        "ipsecIntegrity": "GCMAES256",
                        "ikeEncryption": "AES256",
                        "ikeIntegrity": "SHA256",
                        "dhGroup": "DHGroup24",
                        "pfsGroup": "None"
                    }
                ],
                "trafficSelectorPolicies": [
                ]
            }
        },
        /* Create a Public IP for the Azure Bastion service hosted in the hub Virtual Network */
        {
            "name": "[parameters('bastionPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        /* Create a Route Table for the spoke Virtual Networks */
        {
            "name": "[parameters('spokeRouteTable')]",
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]"
            ],
            "properties": {
                "routes": [
                    {
                        "name": "udr-default",
                        "properties":
                        {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualNetworkGateway"
                        }
                    }
                ],
                "disableBgpRoutePropagation": "False"
            },
            "resources": [
            ]
        },
        /* Assign Route Tables to the appropriate subnets */
        {
            "name": "routeAssignment",
            "apiVersion": "[variables('resourceDeploymentsApiVersion')]",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]",
                "[concat('Microsoft.Network/routeTables/', parameters('spokeRouteTable'))]"
            ],
            /* Use a nested template with an inner join to allow for copy index usage to create multiple resources */
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "networkApiVersion": {
                        "value": "[variables('networkApiVersion')]"
                    },
                    "spokeRouteTableId": {
                        "value": "[resourceId('Microsoft.Network/routeTables',parameters('spokeRouteTable'))]"
                    },
                    "spokeVnetName": {
                        "value": "[parameters('spokeVnetName')]"
                    },
                    "primarySubnetName": {
                        "value": "[parameters('primarySubnetName')]"
                    },
                    "spokeCidrs": {
                        "value": "[parameters('spokeCidrs')]"
                    },
                    "spokePrimarySubnetCidrs": {
                        "value": "[parameters('spokePrimarySubnetCidrs')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "networkApiVersion": {
                            "type": "string"
                        },
                        "spokeRouteTableId": {
                            "type": "string"
                        },
                        "spokeVnetName": {
                            "type": "string"
                        },
                        "primarySubnetName": {
                            "type": "string"
                        },
                        "spokeCidrs": {
                            "type": "array"
                        },
                        "spokePrimarySubnetCidrs": {
                            "type": "array"
                        }
                    },
                    /* Assign route table to spoke */
                    "resources": [
                        {
                            "name": "[concat(parameters('spokeVnetName'),copyIndex(1),'/',parameters('primarySubnetName'))]",
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "[parameters('networkApiVersion')]",
                            "properties": {
                                "addressPrefix": "[parameters('spokePrimarySubnetCidrs')[copyIndex()]]",
                                "routeTable": {
                                    "id": "[parameters('spokeRouteTableId')]"
                                }
                            },
                            "copy": {
                                "name": "spokerouteassign",
                                "count": "[length(parameters('spokeCidrs'))]"
                            }
                        }
                    ]
                }
            }
        },
        /* Create Virtual Network Peering on hub to peer each spoke to it */
        {
            "name": "[concat(parameters('hubVnetName'),'/',variables('hubToSpokePeeringName'),copyIndex(1))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'),copyIndex(1))]",
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "true",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',concat(parameters('spokeVnetName'),copyIndex(1)))]"
                }
            },
            "copy": {
                "name": "copyhubpeerings",
                "count": "[length(parameters('spokeCidrs'))]"
            }
        },
        /* Create Virtual Network Peering on each spoke to peer it to the hub */
        {
            "name": "[concat(parameters('spokeVnetName'),copyIndex(1),'/',variables('spokeToHubPeeringName'))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'),copyIndex(1))]",
                "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('hubVngName'))]"
            ],
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "true",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('hubVnetName'))]"
                }
            },
            "copy": {
                "name": "copyspokepeerings",
                "count": "[length(parameters('spokeCidrs'))]"
            }
        },
        /* Deploy a VM into the primary subnet in the hub Virtual Network */
        {
            "name": "[parameters('hubVmName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourceDeploymentsApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "tagValues": {
                        "value": "[parameters('tags')]"
                    },
                    "vmName": {
                        "value": "[parameters('hubVmName')]"
                    },
                    "vnetName": {
                        "value": "[parameters('hubVnetName')]"
                    },
                    "subnetName": {
                        "value": "[parameters('primarySubnetName')]"
                    },
                    "virtualMachineSize": {
                        "value": "[parameters('vmSku')]"
                    },
                    "adminUserName": {
                        "value": "[parameters('vmAdminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('vmAdminPassword')]"
                    }
                },
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/mattfeltonma/arm-templates/master/examples/vm-windows-server-2016-no-ext/vm-win-2016-no-ext.json",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        /* Deploy a VM into the primary subnet in each spoke Virtual Network */
        {
            "name": "[concat(parameters('spokeVmName'),copyIndex(1))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourceDeploymentsApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'), copyIndex(1))]",
                "[concat(concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'), copyIndex(1)),'/virtualNetworkPeerings/',variables('spokeToHubPeeringName'))]",
                "[concat('Microsoft.Network/virtualNetworks/',parameters('hubVnetName'),'/virtualNetworkPeerings/',variables('hubToSpokePeeringName'),copyIndex(1))]",
                "[concat('Microsoft.Network/routeTables/',parameters('spokeRouteTable'))]",
                "[concat('Microsoft.Network/connections/',variables('hubVngConnName'))]",
                "Microsoft.Resources/deployments/routeAssignment"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "tagValues": {
                        "value": "[parameters('tags')]"
                    },
                    "vmName": {
                        "value": "[concat(parameters('spokeVmName'),copyIndex(1))]"
                    },
                    "vnetName": {
                        "value": "[concat(parameters('spokeVnetName'),copyIndex(1))]"
                    },
                    "subnetName": {
                        "value": "[parameters('primarySubnetName')]"
                    },
                    "virtualMachineSize": {
                        "value": "[parameters('vmSku')]"
                    },
                    "adminUserName": {
                        "value": "[parameters('vmAdminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('vmAdminPassword')]"
                    }
                },
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/mattfeltonma/arm-templates/master/examples/vm-windows-server-2016-no-ext/vm-win-2016-no-ext.json",
                    "contentVersion": "1.0.0.0"
                }
            },
            "copy": {
                "name": "vmspokevm",
                "count": "[length(parameters('spokeCidrs'))]"
            }
        },
        /* Create an Azure Bastion instance in the hub Virtual Network */
        {
            "name": "[parameters('bastionName')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/',parameters('bastionPublicIpName'))]",
                "[concat('Microsoft.Network/virtualNetworks/',parameters('hubVnetName'))]",
                "[concat('Microsoft.Resources/deployments/',parameters('hubVmName'))]"
            ],
            "tags": "[parameters('tags')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "bastionConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVnetName'), variables('bastionSubnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('bastionPublicIpName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            }
        }
    ],
    "outputs": {
        "VmHubVmIp": {
            "type": "string",
            "value": "[reference(parameters('hubVmName')).outputs.vmPrivateIpAddress.value]"
        },
        "VmSpoke1VmIp": {
            "type": "string",
            "value": "[reference(concat(parameters('spokeVmName'),'1')).outputs.vmPrivateIpAddress.value]"
        },
        "VmSpoke2VmIp": {
            "type": "string",
            "value": "[reference(concat(parameters('spokeVmName'),'2')).outputs.vmPrivateIpAddress.value]"
        }
    }
}
